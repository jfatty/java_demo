group 'com.csc'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
//生成的jar包包名和版本
war {
    baseName = 'third-platform'
    version = ""
}


//设置jdk的版本
targetCompatibility = 1.8
sourceCompatibility = 1.8

buildscript {
    repositories {
        maven {
            url "http://10.10.100.93:8061/nexus/content/groups/ailk/"
        }
        jcenter()
    }
    dependencies {
        //使用1.4.2.RELEASE版本的Spring框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:2.6.0'
    }
}
apply plugin: 'java'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}


//添加编译时的依赖
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

apply plugin: 'org.hidetake.ssh'

ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    deployServer {
        host = '47.105.44.101'
        port = 22
        user = "minghui"
        password = "zmhui618"
    }
}


task del(dependsOn:war) << {
    ssh.run {
        session(remotes.deployServer) {
            println 'start deleting...'
            executeScript '''#!/bin/sh
                        rm -f /wgy/docker/test_project/third-platform.war
                    '''
        }
    }
}

task copy(dependsOn:del) << {
    ssh.run {
        session(remotes.deployServer) {
            println 'start copying war...'
            put from: buildDir.toString() + '/libs/third-platform.war', into: '/wgy/docker/test_project/'
//            executeScript '''#!/bin/sh
//                        rm -f /wgy/docker/test_project/third-platform.war
//                    '''
//            mv /wgy/docker/test_project/web-1.0.war /wgy/docker/test_project/third-platform.war
        }
    }
}
/*
task stop(dependsOn:copy) << {
    ssh.run {
        session(remotes.deployServer) {
            println 'stop docker...'
            executeScript '''#!/bin/sh
                        cd /wgy/docker/test_project
                        pwd
                    '''
        }
    }
}
task deploy(dependsOn:stop) << {
    ssh.run {
        session(remotes.deployServer) {
            println 'start docker...'
            executeScript '''#!/bin/sh
                        cd /wgy/docker/test_project
                        docker-compose up 
                    '''
        }
    }
}*/

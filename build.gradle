group 'com.csc'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.8

buildscript {
    repositories {
        maven {
            url "http://10.10.100.93:8061/nexus/content/groups/ailk/"
        }
    }
    dependencies {
        //使用1.4.2.RELEASE版本的Spring框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'




//生成的jar包包名和版本
war {
    dependsOn clean
    baseName = 'web'
    version = '1.0'
}

repositories {
    mavenCentral()
}

//设置jdk的版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

//添加编译时的依赖
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task cleanDocker(type: Delete) {
    delete fileTree("${buildDir}/docker") {
        include '**/*'
    }
}
task copyBuild(type: Copy, dependsOn: build) {
    dependsOn cleanDocker
    from "build/libs/${project.getName()}-${version}.war"
    into 'build/docker'
}
task copyScript(type: Copy, dependsOn: copyBuild) {
    from project.file("${buildDir}/resources/main/script")
    into project.file("${buildDir}/docker/script")
}
task createDockerFile(type: Dockerfile, dependsOn: copyScript) {
    from centos
    maintainer 'test demo'
    addFile "${project.getName()}-${version}.war", DOCKER_WORK_HOME
    addFile 'script', "${DOCKER_WORK_HOME}/script"
    environmentVariable 'JAVA_OPTS' , JAVA_OPTS
    environmentVariable 'BOOT_TARGET' , "${project.getName()}-${version}.war"
    runCommand "chmod +x //homeroot/script/*.sh"
    entryPoint("sh", "-c", "/home/root /script/startup.sh")
}


task buildDockerImage(type: DockerBuildImage, dependsOn: createDockerFile) {
    inputDir = createDockerFile.destFile.parentFile
}
task buildDockerTagImage(type: DockerTagImage, dependsOn: buildDockerImage) {
    targetImageId {
        buildDockerImage.imageId
    }
    repository = DOCKER_IMAGE
    conventionMapping.tag = {
        'latest'
    }
    force = true
}
task pushImage(type: DockerPushImage, dependsOn: buildDockerTagImage) {
    conventionMapping.imageName = {
        buildDockerTagImage.getRepository()
    }
    conventionMapping.tag = {
        buildDockerTagImage.getTag()
    }
}
artifactoryPublish {
    dependsOn pushImage
}
